geometricGrowthFun<-function (plot(1:(ttMax+1),for (tt in 1:ttMax) {NN[tt+1] <- RR*NN[tt]}, xlab="time", ylab="N", type="b", col="darkred")
geometricGrowthFun<-function (plot(1:(ttMax+1),for (tt in 1:ttMax) {NN[tt+1] <- RR*NN[tt]}, xlab="time", ylab="N", type="b", col="darkred"))
(
geometricGrowthFun<-function (plot, 1:(ttMax+1),for (tt in 1:ttMax) {NN[tt+1] <- RR*NN[tt]}, xlab="time", ylab="N", type="b", col="darkred"))
function (NN) {plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")}
NN
geometricGrowthFun<-(function(NN))
geometricGrowthFun<-function(NN)
geometricGrowthFun<-function (NN)
geometricGrowthFun (print)
geometricGrowthFun (print)
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
plot
##3.2.1 Mini-exercise
N0 <- 150
RR <- 0.95
ttMax <- 80 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1] <- N0
for (tt in 1:ttMax) {NN[tt+1] <- RR*NN[tt]} # this will create loops
#over ttMax timesteps, and the model equation will then update NN.
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
##3.2.1 Mini-exercise
N0 <- 150
RR <- 0.95
ttMax <- 80 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1] <- N0
for (tt in 1:ttMax) {NN[tt+1] <- RR*NN[tt]} # this will create loops
#over ttMax timesteps, and the model equation will then update NN.
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
##3.2.1 Mini-exercise
N0 <- 150
RR <- 0.95
ttMax <- 80 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1] <- N0
for (tt in 1:ttMax) {NN[tt+1] <- RR*NN[tt]} # this will create loops
#over ttMax timesteps, and the model equation will then update NN.
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
function (geometricGrowthFun)<-plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
geometricGrowthFun<-function(ttMax) {plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")}
geometricGrowthFun
geometricGrowthFun<-function(ttMax) {plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")}
geometricGrowthFun
geometricGrowthFun<-function(ttMax) {x<-plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")}
geometricGrowthFun
return(geometricGrowthFun)
return(x)
geometricGrowthFun<-function(ttMax) {plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")}
geometricGrowthFun (N0=10, RR1.05)
geometricGrowthFun (N0=10, RR=1.05)
##3.2.1 Mini-exercise
N0 <- 150
RR <- 0.95
ttMax <- 80 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1] <- N0
for (tt in 1:ttMax) {NN[tt+1] <- RR*NN[tt]} # this will create loops
#over ttMax timesteps, and the model equation will then update NN.
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
###########################
#3.2.2 *Exercise
geometricGrowthFun<-function(ttMax) {plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")}
geometricGrowthFun (N0=10, RR=1.05)
##3.2.1 Mini-exercise
N0 <- 150
RR <- 0.95
ttMax <- 80 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1] <- N0
for (tt in 1:ttMax) {NN[tt+1] <- RR*NN[tt]} # this will create loops
#over ttMax timesteps, and the model equation will then update NN.
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
geometricGrowthFun<-function(ttMax) {(for (tt in 1:ttMax) {NN[tt+1] <- RR*NN[tt]) (plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred"))}
for (tt in 1:ttMax) {NN[tt+1] <- RR*NN[tt]} # this will create loops
for
)]
for(print)
N0 <- 150
RR <- 0.95
ttMax <- 80
for (tt in 1:ttMax) {NN[tt+1] <- RR*NN[tt]} # this will create loops
for
(print)
function (t in 1:ttMax)<- plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
function (for (t in 1:ttMax))<- plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
function (for (t in 1:ttMax){NN[tt+1] <- RR*NN[tt]})<- plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
N0 <- 150
RR <- 0.95
ttMax <- 80 #n
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN
N0 <- 10
RR <- 0.5
KK<-100
ttMax <- 100 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1]<-N0
for(tt in 1:ttMax){NN[tt+1]<-N[tt]*(1+(RR*(1-(N[tt]))))}
for(tt in 1:ttMax){NN[tt+1]<-NN[tt]*(1+(RR*(1-(N[tt]))))}
for(tt in 1:ttMax){NN[tt+1]<-NN[tt]*(1+(RR*(1-(NN[tt]))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
for(tt in 1:ttMax){NN[tt+1]<-(NN[tt])*(1+(RR*(1-(NN[tt]))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
N0 <- 10
RR <- 0.5
KK<-100
ttMax <- 10 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1]<-N0
for(tt in 1:ttMax){NN[tt+1]<-(NN[tt])*(1+(RR*(1-(NN[tt]))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
N0 <- 10
RR <- 0.5
KK<-100
ttMax <- 20 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1]<-N0
for(tt in 1:ttMax){NN[tt+1]<-(NN[tt])*(1+(RR*(1-(NN[tt]))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
N0 <- 100
RR <- 0.5
KK<-100
ttMax <- 20 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1]<-N0
for(tt in 1:ttMax){NN[tt+1]<-(NN[tt])*(1+(RR*(1-(NN[tt]))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
N0 <- 100
RR <- 0.5
KK<-100
ttMax <- 20 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1]<-N0
for(tt in 1:ttMax){NN[tt+1]<-(NN[tt])*(1+(RR*(1-(NN[tt]))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
N0 <- 100
RR <- 0.5
KK<-100
ttMax <- 20 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1)
NN
NN[1]<-N0
NN[21]
NN[1:21]
for(tt in 1:ttMax){NN[tt+1]<-(NN[tt])*(1+(RR*(1-(NN[tt]))))}
NN[1:21]
for(tt in 1:ttMax){NN[tt+1]<-NN[tt]*(1+(RR*(1-(NN[tt]))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
N0 <- 100
rr <- 0.5
KK<-100
ttMax <- 20 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1]<-N0
for(tt in 1:ttMax){NN[tt+1]<-NN[tt]*(1+(rr*(1-((NN[tt]/KK))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
for(tt in 1:ttMax){NN[tt+1]<-NN[tt]*(1+(rr*(1-((NN[tt])/KK))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
N0 <- 10
rr <- 0.5
KK<-100
ttMax <- 20 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1]<-N0
for(tt in 1:ttMax){NN[tt+1]<-NN[tt]*(1+(rr*(1-((NN[tt])/KK))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
N0 <- 30
rr <- 0.5
KK<-100
ttMax <- 20 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1]<-N0
for(tt in 1:ttMax){NN[tt+1]<-NN[tt]*(1+(rr*(1-((NN[tt])/KK))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
N0 <- 10
rr <- 0.5
KK<-100
ttMax <- 15 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1]<-N0
for(tt in 1:ttMax){NN[tt+1]<-NN[tt]*(1+(rr*(1-((NN[tt])/KK))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
N0 <- 10
rr <- 0.5
KK<-100
ttMax <- 10 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1]<-N0
for(tt in 1:ttMax){NN[tt+1]<-NN[tt]*(1+(rr*(1-((NN[tt])/KK))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
N0 <- 8
rr <- 0.5
KK<-100
ttMax <- 15 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1]<-N0
for(tt in 1:ttMax){NN[tt+1]<-NN[tt]*(1+(rr*(1-((NN[tt])/KK))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
#3.3 Logistic growthin discrete time
N0 <- 8
rr <- 0.5
KK<-100
ttMax <- 15 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1]<-N0
for(tt in 1:ttMax){NN[tt+1]<-NN[tt]*(1+(rr*(1-((NN[tt])/KK))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="pink")
#3.3 Logistic growthin discrete time
N0 <- 8
rr <- 0.5
KK<-100
ttMax <- 15 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1]<-N0
for(tt in 1:ttMax){NN[tt+1]<-NN[tt]*(1+(rr*(1-((NN[tt])/KK))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="pink")
0 <- 8
rr <- 0.5
KK<-100
ttMax <- 15 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1]<-N0
for(tt in 1:ttMax){NN[tt+1]<-NN[tt]*(1+(rr*(1-((NN[tt])/KK))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="pink")
#3.3 Logistic growthin discrete time
N0 <- 8
rr <- 0.5
KK<-100
ttMax <- 15 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1]<-N0
for(tt in 1:ttMax){NN[tt+1]<-NN[tt]*(1+(rr*(1-((NN[tt])/KK))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkgray")
#3.3 Logistic growthin discrete time
N0 <- 8
rr <- 0.5
KK<-100
ttMax <- 15 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1]<-N0
for(tt in 1:ttMax){NN[tt+1]<-NN[tt]*(1+(rr*(1-((NN[tt])/KK))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkpurple")
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkgreen")
function (N0, RR){plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")}
geometricGrowthFun<-function (N0, RR){plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")}
##3.2.1 Mini-exercise
N0 <- 150
RR <- 0.95
ttMax <- 80 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1] <- N0
for (tt in 1:ttMax) {NN[tt+1] <- RR*NN[tt]} # this will create loops
#over ttMax timesteps, and the model equation will then update NN.
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
#################
##3.2.2 Exercise
function (N0, RR){plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")}
geometricGrowthFun<-function (N0, RR){plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")}
geometricGrowthFun(10,0.95)
geometricGrowthFun(10,0.95)
geometricGrowthFun(100,0.95)
geometricGrowthFun
function
)
geometricGrowthFun<-function (10, 0.95){plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")}
geometricGrowthFun<-function (N0, RR){plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="dargray")}
geometricGrowthFun(print)
geometricGrowthFun<-function (N0, RR){plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkgray")}
geometricGrowthFun(print)
N0 <- 10
RR <- 0.95
ttMax <- 100
geometricGrowthFun(print)
geometricGrowthFun<-function (N0, RR){plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkgray")}
geometricGrowthFun(print)
N0 <- 10
RR <- 0.95
ttMax <- 100 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1] <- N0
for (tt in 1:ttMax) {NN[tt+1] <- RR*NN[tt]} # this will create loops
#over ttMax timesteps, and the model equation will then update NN.
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
#################
##3.2.2 *Exercise
function (N0, RR){plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")}
geometricGrowthFun<-function (N0, RR){plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkgray")}
geometricGrowthFun(print)
geometricGrowthFun(N0=10, RR=0.95)
geometricGrowthFun(print)
geometricGrowthFun(N0=20, RR=0.95)
geometricGrowthFun(print)
N0 <- 20
RR <- 0.95
ttMax <- 100 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1] <- N0
for (tt in 1:ttMax) {NN[tt+1] <- RR*NN[tt]} # this will create loops
#over ttMax timesteps, and the model equation will then update NN.
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
#################
##3.2.2 *Exercise
function (N0, RR){plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")}
geometricGrowthFun<-function (N0, RR){plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkgray")}
geometricGrowthFun(N0=20, RR=0.95)
geometricGrowthFun(print)
geometricGrowthFun<-function (NN){plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkgray")}
geometricGrowthFun(N0=20, RR=0.95)
function (N0, RR){plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")}
geometricGrowthFun<-function (NN){plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkgray")}
geometricGrowthFun(N0=20, RR=0.95)
geometricGrowthFun(print)
geometricGrowthFun<-function (NN){plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="log", col="darkgray")}
geometricGrowthFun(print)
f
function (NN){plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")}
geometricGrowthFun<-function (NN){plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkgray")}
geometricGrowthFun(N0=20, RR=0.95)
geometricGrowthFun(print)
N0<-20
RR<-0.95
function (NN){plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")}
geometricGrowthFun<-function (NN){plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkgray")}
geometricGrowthFun(N0, RR)
geometricGrowthFun(print)
N0<-20
RR<-0.95
function (N0, RR){plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")}
geometricGrowthFun<-function (NN){plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkgray")}
geometricGrowthFun
geometricGrowthFun (print)
function ([ttMax+1], NN){plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")}
geometricGrowthFun<- function(plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred"))
geometricGrowthFun<- function (plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred"))
geometricGrowthFun<- function (1:(ttMax+1), NN) {plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")}
geometricGrowthFun<- function (plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
##3.2.1 Mini-exercise
N0 <- 10
RR <- 0.95
ttMax <- 100 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1] <- N0
for (tt in 1:ttMax) {NN[tt+1] <- RR*NN[tt]} # this will create loops
#over ttMax timesteps, and the model equation will then update NN.
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
N0 <- 8
rr <- 0.5
KK<-100
ttMax <- 15 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1]<-N0
for(tt in 1:ttMax){NN[tt+1]<-NN[tt]*(1+(rr*(1-((NN[tt])/KK))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkgreen")
#############
NN[1] <- N0
geometricGrowthFun<- function(N0, RR) {
function(,){
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
}
}
geometricGrowthFun(20,1.05)
geometricGrowthFun<- function(N0, RR) {
function("",""){
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
}
}
geometricGrowthFun(20,1.05)
geometricGrowthFun<- function(N0) {
function(){
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
}
}
geometricGrowthFun(20)
geometricGrowthFun()
#3.3 Logistic growthin discrete time
N0 <- 8
rr <- 0.8
KK<-100
ttMax <- 15 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1]<-N0
for(tt in 1:ttMax){NN[tt+1]<-NN[tt]*(1+(rr*(1-((NN[tt])/KK))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkgreen")
3.3 Logistic growthin discrete time
N0 <- 8
rr <- 1.0
KK<-100
ttMax <- 15 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1]<-N0
for(tt in 1:ttMax){NN[tt+1]<-NN[tt]*(1+(rr*(1-((NN[tt])/KK))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkgreen")
#############
#3.3.1 *Mini-exercise
N0 <- 8
rr <- 0.3
KK<-100
ttMax <- 15 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1]<-N0
for(tt in 1:ttMax){NN[tt+1]<-NN[tt]*(1+(rr*(1-((NN[tt])/KK))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkgreen")
#3.3 Logistic growthin discrete time
N0 <- 8
rr <- 0.5
KK<-100
ttMax <- 15 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1]<-N0
for(tt in 1:ttMax){NN[tt+1]<-NN[tt]*(1+(rr*(1-((NN[tt])/KK))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkgreen")
#############
#3.3.1 *Mini-exercise
discreteLogisticFun <- function(N0,rr,KK) {
for(tt in 1:ttMax){NN[tt+1]<-NN[tt]*(1+(rr*(1-((NN[tt])/KK))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkgreen")
}
discreteLogisticFun(10,0.5,100)
discreteLogisticFun
discreteLogisticFun (print)
discreteLogisticFun <- function(N0,rr,KK) {
for(tt in 1:ttMax){NN[tt+1]<-NN[tt]*(1+(rr*(1-((NN[tt])/KK))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkgreen")
}
discreteLogisticFun(N0=10,rr=0.5,KK=100)
discreteLogisticFun (print)
print(rr)
discreteLogisticFun <- function (N0,rr,KK) {
for(tt in 1:ttMax){NN[tt+1]<-NN[tt]*(1+(rr*(1-((NN[tt])/KK))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkgreen")
}
discreteLogisticFun(N0=10,rr=0.5,KK=100)
discreteLogisticFun (print)
discreteLogisticFun <- function (N0,0.5,KK) {
for(tt in 1:ttMax){NN[tt+1]<-NN[tt]*(1+(rr*(1-((NN[tt])/KK))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkgreen")
}
discreteLogisticFun(N0=10,rr=0.5,KK=100)
discreteLogisticFun (print)
geometricGrowthFun<- function(N0, RR) {
NN <- matrix(NA, nrow=1, ncol=ttMax+1)
NN[1] <- N0
for (tt in 1:ttMax) {NN[tt+1] <- RR*NN[tt]}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
}
geometricGrowthFun(N0=10,RR=0.95)
discreteLogisticFun <- function (N0,rr,KK) {
NN <- matrix(NA, nrow=1, ncol=ttMax+1)
NN[1]<-N0
for(tt in 1:ttMax){NN[tt+1]<-NN[tt]*(1+(rr*(1-((NN[tt])/KK))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkgreen")
}
discreteLogisticFun (N0=10, rr=0.5, KK=100)
#3.3 Logistic growthin discrete time
N0 <- 8
rr <- 0.3
KK<-100
ttMax <- 15 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1]<-N0
for(tt in 1:ttMax){NN[tt+1]<-NN[tt]*(1+(rr*(1-((NN[tt])/KK))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkgreen")
#3.3 Logistic growthin discrete time
N0 <- 8
rr <- 0.8
KK<-100
ttMax <- 15 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1]<-N0
for(tt in 1:ttMax){NN[tt+1]<-NN[tt]*(1+(rr*(1-((NN[tt])/KK))))}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkgreen")
##3.2.1 Mini-exercise
N0 <- 10
RR <- 0.95
ttMax <- 100 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1] <- N0
for (tt in 1:ttMax) {NN[tt+1] <- RR*NN[tt]} # this will create loops
#over ttMax timesteps, and the model equation will then update NN.
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
#################
##3.2.2 *Exercise
geometricGrowthFun<- function(N0, RR) {
NN <- matrix(NA, nrow=1, ncol=ttMax+1)
NN[1] <- N0
for (tt in 1:ttMax) {NN[tt+1] <- RR*NN[tt]}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
}
geometricGrowthFun(N0=10,RR=0.95)
q()
setwd("C:/Users/Camila Medeiros/Documents/GitHub/R-Bootcamp")
#3.2.1 Mini-exercise
N0 <- 10
RR <- 0.95
ttMax <- 100 #number of timesteps!
NN <- matrix(NA, nrow=1, ncol=ttMax+1) #this will create a 1x11 matrix with rep NA's.
NN[1] <- N0
for (tt in 1:ttMax) {NN[tt+1] <- RR*NN[tt]} # this will create loops
#over ttMax timesteps, and the model equation will then update NN.
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
#################
##3.2.2 *Exercise
geometricGrowthFun<- function(N0, RR) {
NN <- matrix(NA, nrow=1, ncol=ttMax+1)
NN[1] <- N0
for (tt in 1:ttMax) {NN[tt+1] <- RR*NN[tt]}
plot(1:(ttMax+1), NN, xlab="time", ylab="N", type="b", col="darkred")
}
geometricGrowthFun(N0=10,RR=0.95)
q()
